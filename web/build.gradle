apply plugin: "org.springframework.boot"
apply plugin: "com.netflix.nebula.node"

def applicationDir = "${rootProject.projectDir}/devops/dev"
def instance = System.properties['instance'] ?: '0'
def buildClient = project.hasProperty("client")
def devPort = 8070 + (instance as Integer)
def devPortInternal = 8170 + (instance as Integer)
def debugPort = 8870 + (instance as Integer)

node {
    version = "${nodeVersion}"
    npmVersion = "${npmVersion}"
    download = true
    distBaseUrl = 'https://nodejs.org/dist/'
    workDir = file("${rootProject.projectDir}/.gradle/nodejs")
    npmWorkDir = file("${rootProject.projectDir}/.gradle/npm")
    nodeModulesDir = file("${project.projectDir}/client")
}

springBoot { buildInfo() }

tasks.named("jar") {
    enabled = false
    archiveClassifier.set("")
}

tasks.named('startScripts') {
    dependsOn bootJar
}

tasks.register('buildReactApp', NpmTask) {
    dependsOn npmInstall
    environment = ["CI": true]
    args = ["run", "build"]
}

tasks.register('startReactApp', NpmTask) {
    dependsOn npmInstall
    environment = ["CI": true]
    args = ["run", "start"]
}

tasks.register('testReactApp', NpmTask) {
    dependsOn npmInstall
    environment = ["CI": true]
    args = ["run", "test", "--", "--coverage"]
}

tasks.register('copyReactbuild', Copy) {
    dependsOn buildReactApp
    from "client/build"
    into "${project.layout.buildDirectory.get().asFile}/resources/main/static"
}

tasks.register('restAssuredTest', Test) {
    outputs.upToDateWhen { false }
    systemProperty "integration.tests.baseUrl", System.getProperty("baseUrl", "http://localhost:8070")
    systemProperty "integration.tests.actuatorUrl", System.getProperty("actuatorUrl", "http://localhost:8170")
    include "**/*IT*"
}

tasks.register('appRunDebug') {
    println 'Running in Debug mode'
    doFirst {
        bootRun.configure {
            jvmArgs = [
                    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$debugPort"
            ]
        }
    }
    finalizedBy("bootRun")
}

tasks.register('appRun') {
    println 'Running in normal mode'
    finalizedBy("bootRun")
}

if (buildClient) {

    tasks.named('jar') {
        dependsOn buildReactApp
    }

    tasks.named('bootJar') {
        dependsOn copyReactbuild
    }

    tasks.named('compileTestJava') {
        dependsOn copyReactbuild
    }
}

clean {
    delete "client/build"
}

bootJar {
    manifest {
        attributes(
                "Main-Class": "org.springframework.boot.loader.PropertiesLauncher",
                "Start-Class": "se.inera.intyg.intygsadmin.web.IntygsadminApplication"
        )
    }
}

bootRun {
    systemProperty "dev.http.port", devPort
    systemProperty "dev.http.port.internal", devPortInternal
    systemProperty "spring.profiles.active", "dev, fake, caching-enabled, it-stub, wc-stub, pp-stub, ts-stub"
    systemProperty "spring.config.additional-location", "file:${applicationDir}/config/"
}

test {
    exclude("**/*IT*")
}

dependencies {
    implementation project(":intygsadmin-persistence")

    implementation "se.inera.intyg.infra:driftbanner-dto:${infraVersion}"
    implementation "se.inera.intyg.infra:integreradeenheter:${infraVersion}"
    implementation "se.inera.intyg.infra:intyginfo:${infraVersion}"
    implementation "se.inera.intyg.infra:security-common:${infraVersion}"
    implementation "se.inera.intyg.infra:testcertificate:${infraVersion}"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"

    implementation "com.querydsl:querydsl-core"
    implementation "jakarta.servlet:jakarta.servlet-api"
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "net.javacrumbs.shedlock:shedlock-provider-redis-spring:${shedlockSpringVersion}"
    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockSpringVersion}"
    implementation "org.apache.poi:poi-ooxml:${apachePoiVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"
    implementation "org.springframework.session:spring-session-data-redis"
    implementation "redis.clients:jedis"

    compileOnly("org.projectlombok:lombok")
    annotationProcessor "jakarta.servlet:jakarta.servlet-api"

    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    testImplementation("commons-io:commons-io:${commonsIOVersion}")
    testImplementation("io.rest-assured:json-path")
    testImplementation("io.rest-assured:json-schema-validator")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("io.rest-assured:xml-path")
}
